 n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True


# Define a function to factor a single RSA number using the trial division method
def factor_rsa_number(n):
    # Initialize an empty list to store the prime factors of n
    factors = []
    # Check if 2 is a factor of n
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    # Check for odd prime factors up to sqrt(n)
    i = 3
    while i <= sqrt(n):
        if n % i == 0:
            factors.append(i)
            n //= i
        else:
            i += 2
    # If n is still greater than 2, it must be prime
    if n > 2:
        factors.append(n)
    # If only one factor is found, return it as p and n//p as q
    if len(factors) == 1:
        p = factors[0]
        q = n // p
        return (p, q)
    # If more than one factor is found, recursively factor each factor until all are prime
    else:
        pq = []
        for factor in factors:
            if is_prime(factor):
                pq.append(factor)
            else:
                p, q = factor_rsa_number(factor)

